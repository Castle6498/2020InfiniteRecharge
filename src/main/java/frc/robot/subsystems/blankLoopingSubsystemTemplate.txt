package frc.robot.subsystems;

import frc.lib.util.ContinuousRotationServo;
import frc.robot.loops.Loop;
import frc.robot.loops.Looper;

/**
 
 */

 
public class Indexer extends Subsystem {

    
  

    private static Indexer instance_ = new Indexer();

    public static Indexer getInstance() {
        return instance_;
    }


   

    

    Loop mLoop = new Loop() {
    
        @Override
        public void onLoop() {
            synchronized (Indexer.this) {
                
        }
     }

        @Override
        public void onStart() {
            synchronized (Indexer.this) {
               
            }
        }

        @Override
        public void onStop() {
            synchronized (Indexer.this) {
               
            }
        }
    };

    private Indexer() {
        
    }

   

  
   
    private synchronized void set(double power) {
       
    }



   

 

  

    @Override
    public void outputToSmartDashboard() {
        
    }

    @Override
    public synchronized void stop() {
        set(0);
    }

    @Override
    public synchronized void zeroSensors() {
     
    }
    
    @Override
    public void registerEnabledLoops(Looper in) {
        in.register(mLoop);
    }
}






 private ElevatorState handleExtendingScan()
    {
        ElevatorState newState;
        if (mStateChanged) // setup
        {
            liftmotor.set(ControlMode.Velocity, Constants.kLiftScanVelocity);
        }
        barLock = false;
        // always
        if (barSensor.getVoltage() >= Constants.kBarDetectionThreshold) 
        {
            // we see it boys
            barTimer.start();
        }
        else
        {
            // keep going
            barTimer.stop();
            
        }

        if (barTimer.get() >= Constants.kLiftBarDetectionTime) // LOCKED ON
        {
            barLock = true;
            liftmotor.set(ControlMode.Position, liftmotor.getSelectedSensorPosition()); // stop here
            newState = ElevatorState.EXTENDED;
        }
        else
        {
            // alert drivers
            newState = mWantedState;
        }

        return newState;
    }